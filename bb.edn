{:pods {org.babashka/fswatcher {:version "0.0.3"}}
 :paths ["bb"]
 :tasks {:requires ([clojure.string :refer [join starts-with? ends-with?]])
         :init (do
                 (require '[pod.babashka.fswatcher :as fw]
                          '[hiccuped-hawk :as hh]
                          '[clojure.core.async :as a]
                          '[babashka.fs :as fs]
                          '[clojure.edn :as edn])

                 (def platform-alias
                   (if (starts-with? (System/getProperty "os.name") "Windows")
                     :windows :*nix))

                 (defn run-subtasks
                   "Interprets every command line argument as a subtask key to select.
                    Selects all available keys if no input is given.
                    For every selected key present in `subtasks`, `f` will be called on its value.
                    Expected to produce side-effects only."
                   [subtasks f]
                   (doseq [s (or *command-line-args* (keys subtasks))]
                     (when-let [data ((keyword s) subtasks)]
                       (f data))))

                 (defn hawk-hiccup [in out]
                   (let [ch (a/chan (a/dropping-buffer 10)
                                    (filter (fn [e]
                                              (and (:path e)
                                                   (ends-with? (:path e) ".clj")
                                                   (#{:write :create} (:type e))))))]
                     (fw/watch in (fn [e] (a/go (a/>! ch e))) {:recursive true})
                     ;; Try to mitigate duplicate events while processing the queue.
                     ;; Seems to only happen in Windows, curiously.
                     (loop [prev-t (System/currentTimeMillis)
                            prev-f nil]
                       (let [f (:path (a/<!! ch))
                             t (System/currentTimeMillis)]
                         (when (or (not= platform-alias :windows)
                                   (not= f prev-f)
                                   (> (- t prev-t) 10))
                           (time (hh/compile in out f)))
                         (recur t f)))))

                 (def publish-from "public/")

                 (defn publish-to-ftp [user password host path]
                   (shell "lftp" "-c"
                          (format "open ftp://%s:%s@%s; mirror -R -P=10 -e %s %s"
                                  user password host publish-from path)))

                 (defn publish-to-ssh [user password host path]
                   (shell "rsync" "-r"
                          publish-from
                          (format "%s:%s -u%s,%s" host path user password)))

                 (defn publish-to-firebase []
                   (shell "firebase" "deploy" "--only" "hosting"))

                 (defn publish
                   [{:keys [method user password host path]}]
                   (println (format "Publishing to %s via %s..." (or host "?") (name method)))
                   (case method
                     :ftp (publish-to-ftp user password host path)
                     :sftp (publish-to-ftp user password host path)
                     :ssh (publish-to-ssh user password host path)
                     :firebase (publish-to-firebase)
                     (binding [*out* *err*]
                       (println "Unrecognised method:" method))))

                 (defn publish-with-credentials-file
                   [credentials-filename]
                   (if (fs/exists? credentials-filename)
                     (publish (edn/read-string (slurp credentials-filename)))
                     (binding [*out* *err*]
                       (println "ERROR! Credentials file not found."
                                "Please provide an appropriate"
                                credentials-filename "file.")))))

         platform (println "Platform detected:" platform-alias)

         version {:doc "Displays installed versions of individual binaries required by the project. Whitelistable, e.g.: bb version babashka node "
                  :task (run-subtasks {:hugo ["Hugo" "hugo version"]
                                       :babashka ["Babashka" "bb --version"]
                                       :node ["Node.js" "node --version"]
                                       :npm ["Npm" "npm --version"]}
                                      (fn [[name command]]
                                        (print (str name ": "))
                                        (shell {:out *out*} command)))}

         develop {:doc "Starts the development environment. This is divided into subtasks that you can call individually too."
                  :task (run '-develop {:parallel true})}
         -develop {:depends [develop:tailwind develop:hugo develop:hiccup]}
         develop:hugo (shell "hugo serve -D --disableFastRender")
         develop:tailwind (let [in "themes/konrad/assets/css/tailwind.src.css"
                                out "themes/konrad/assets/css/tailwind.css"
                                build (format "npx tailwindcss -i %s -o %s" in out)
                                watch (format "npx tailwindcss -i %s -o %s --watch" in out)]
                            (shell build)
                            (shell watch))
         develop:hiccup {:task (do (println "Instructing the hiccuped hawk to hawk your Hiccup...")
                                   (hawk-hiccup "hiccup/layouts" "themes/konrad/layouts"))}

         build {:doc "Builds the website."
                :depends [build:hiccup build:tailwind build:hugo]}
         build:hiccup (hh/compile-all "hiccup/layouts" "themes/konrad/layouts")
         build:tailwind (let [in "themes/konrad/assets/css/tailwind.src.css"
                              out "themes/konrad/assets/css/tailwind.css"
                              cmd (format "npx tailwindcss -i %s -o %s --minify" in out)]
                          (shell cmd))
         build:hugo (do
                      (let [f (fs/file "public")]
                        (when (fs/directory? f)
                          (fs/delete-tree f)))
                      (shell "hugo -D --minify"))

         stage {:doc "Publishes the website to the staging host described in `stage.edn`."
                :task (do
                        (println "Building...")
                        (run 'build)
                        (println)
                        (publish-with-credentials-file "stage.edn"))}
         publish {:doc "Publishes the website to the production host described in `publish.edn`."
                  :task (do
                          (println "Building...")
                          (run 'build)
                          (println)
                          (publish-with-credentials-file "publish.edn"))}}}
